//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/TicketCode.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TicketCode.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TicketCodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOKEN=1, MODIFIER=2, LITERAL=3, QUANT=4, DIGITS=5, WS=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TOKEN", "MODIFIER", "LITERAL", "QUANT", "DIGITS", "WS"
	};


	public TicketCodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TicketCodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN", "MODIFIER", "LITERAL", "QUANT", "DIGITS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TicketCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TicketCodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,6,63,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,
		1,0,1,0,3,0,18,8,0,1,0,1,0,3,0,22,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,3,0,34,8,0,1,0,3,0,37,8,0,1,1,1,1,1,1,1,1,1,2,4,2,44,8,2,11,2,
		12,2,45,1,3,1,3,1,3,1,3,1,4,4,4,53,8,4,11,4,12,4,54,1,5,4,5,58,8,5,11,
		5,12,5,59,1,5,1,5,0,0,6,1,1,3,2,5,3,7,4,9,5,11,6,1,0,4,2,0,108,108,117,
		117,1,0,36,36,1,0,48,57,3,0,9,10,13,13,32,32,74,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,1,13,1,0,0,0,3,38,1,
		0,0,0,5,43,1,0,0,0,7,47,1,0,0,0,9,52,1,0,0,0,11,57,1,0,0,0,13,33,5,36,
		0,0,14,34,5,110,0,0,15,17,5,108,0,0,16,18,3,3,1,0,17,16,1,0,0,0,17,18,
		1,0,0,0,18,34,1,0,0,0,19,21,5,97,0,0,20,22,3,3,1,0,21,20,1,0,0,0,21,22,
		1,0,0,0,22,34,1,0,0,0,23,24,5,109,0,0,24,34,5,109,0,0,25,26,5,100,0,0,
		26,34,5,100,0,0,27,28,5,121,0,0,28,34,5,121,0,0,29,30,5,121,0,0,30,31,
		5,121,0,0,31,32,5,121,0,0,32,34,5,121,0,0,33,14,1,0,0,0,33,15,1,0,0,0,
		33,19,1,0,0,0,33,23,1,0,0,0,33,25,1,0,0,0,33,27,1,0,0,0,33,29,1,0,0,0,
		34,36,1,0,0,0,35,37,3,7,3,0,36,35,1,0,0,0,36,37,1,0,0,0,37,2,1,0,0,0,38,
		39,5,40,0,0,39,40,7,0,0,0,40,41,5,41,0,0,41,4,1,0,0,0,42,44,8,1,0,0,43,
		42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,6,1,0,0,0,47,48,
		5,123,0,0,48,49,3,9,4,0,49,50,5,125,0,0,50,8,1,0,0,0,51,53,7,2,0,0,52,
		51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,10,1,0,0,0,56,
		58,7,3,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,
		61,1,0,0,0,61,62,6,5,0,0,62,12,1,0,0,0,8,0,17,21,33,36,45,54,59,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TicketCode.Grammar
